---
version: "3"

networks:
  apps_net:
    driver: bridge
    name: apps_net
    ipam:
      driver: default
      config:
        - subnet: ${APPS_NET_SUBNET}.0.0/24
          gateway: ${APPS_NET_SUBNET}.0.1
  apps_protected_net:
    driver: bridge
    name: apps_protected_net
    ipam:
      driver: default
      config:
        - subnet: ${APPS_NET_SUBNET}.1.0/24
          gateway: ${APPS_NET_SUBNET}.1.1
  keycloak_db:
    driver: bridge
    name: keycloak_db
    internal: true
    ipam:
      driver: default
      config:
        - subnet: ${APPS_NET_SUBNET}.2.0/24
          gateway: ${APPS_NET_SUBNET}.2.1
  redis:
    driver: bridge
    name: redis
    internal: true
    ipam:
      driver: default
      config:
        - subnet: ${APPS_NET_SUBNET}.3.0/24
          gateway: ${APPS_NET_SUBNET}.3.1

volumes:
  netdataconfig:
  netdatalib:
  netdatacache:
  redis:

services:
  sonarr:
    image: ghcr.io/linuxserver/sonarr:latest
    labels:
      - traefik.enable=false
    container_name: sonarr
    environment:
      - PUID=${USERID}
      - PGID=${GROUPID}
      - TZ=${TZ}
    ports: []
    volumes:
      - ${CONFIGS_BASE_DIR}/sonarr:/config
      - ${TV_MEDIA_DIR}:/tv
      - ${DOWNLOADS}/tv:/downloads  
    networks:
      - apps_protected_net
    restart: unless-stopped
  sonarr-auth-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    container_name: sonarr-auth-proxy
    labels:
      - traefik.enable=true
      - traefik.docker.network=apps_net
      - traefik.http.services.sonarr_svc.loadbalancer.server.port=4180
      - traefik.http.services.sonarr_svc.loadbalancer.server.scheme=http
      - traefik.http.routers.sonarr.service=sonarr_svc
      - traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAIN_NAME}`)
      - traefik.http.routers.sonarr.entrypoints=websecure
      - traefik.http.routers.sonarr.tls=true
      - traefik.http.routers.sonarr.tls.certresolver=le
      - traefik.http.routers.sonarr-http.entrypoints=web
      - traefik.http.routers.sonarr-http.rule=Host(`sonarr.${DOMAIN_NAME}`)
      - traefik.http.routers.sonarr-http.middlewares=sonarr-https-redirect
      - traefik.http.middlewares.sonarr-https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.sonarr-https-redirect.redirectscheme.permanent=true
    command:
      - --provider=keycloak-oidc
      - --cookie-secret=${KEYCLOAK_MASTER_SECRET}
      - --cookie-secure=true
      - --cookie-domain=.${DOMAIN_NAME}
      - --cookie-name=_oauth2_proxy_master
      - --cookie-samesite=lax
      - --provider-display-name="Keycloak OIDC"
      - --oidc-issuer-url=https://auth.${DOMAIN_NAME}/realms/user
      - --upstream=http://sonarr:8989
      - --skip-provider-button=true
      - --reverse-proxy=true
      - --pass-basic-auth=false
      - --pass-user-headers=false
      - --set-xauthrequest=false
      - --set-authorization-header=false
      - --set-basic-auth=false
      - --client-id=sonarr
      - --client-secret=${KEYCLOAK_SONARR_SECRET}
      - --http-address=0.0.0.0:4180
      - --email-domain=*
      - --session-store-type=redis
      - --redis-connection-url=redis://redis
      - --redirect-url=https://sonarr.${DOMAIN_NAME}/oauth2/callback
      - --allowed-role=sonarr:client-access
    ports: []
    networks:
      - apps_net
      - apps_protected_net
      - redis
    depends_on:
      - sonarr
      - redis
      - keycloak
      - reverse-proxy
    restart: unless-stopped
  radarr:
    image: ghcr.io/linuxserver/radarr:latest
    labels:
      - traefik.enable=false
    container_name: radarr
    environment:
      - PUID=${USERID}
      - PGID=${GROUPID}
      - TZ=${TZ}
    ports: []
    volumes:
      - ${CONFIGS_BASE_DIR}/radarr:/config
      - ${MOVIE_MEDIA_DIR}:/movies
      - ${DOWNLOADS}/movies:/downloads
    networks:
      - apps_protected_net
    restart: unless-stopped
  radarr-auth-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    container_name: radarr-auth-proxy
    labels:
      - traefik.enable=true
      - traefik.docker.network=apps_net
      - traefik.http.services.radarr_svc.loadbalancer.server.port=4180
      - traefik.http.services.radarr_svc.loadbalancer.server.scheme=http
      - traefik.http.routers.radarr.service=radarr_svc
      - traefik.http.routers.radarr.rule=Host(`radarr.${DOMAIN_NAME}`)
      - traefik.http.routers.radarr.entrypoints=websecure
      - traefik.http.routers.radarr.tls=true
      - traefik.http.routers.radarr.tls.certresolver=le
      - traefik.http.routers.radarr-http.entrypoints=web
      - traefik.http.routers.radarr-http.rule=Host(`radarr.${DOMAIN_NAME}`)
      - traefik.http.routers.radarr-http.middlewares=radarr-https-redirect
      - traefik.http.middlewares.radarr-https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.radarr-https-redirect.redirectscheme.permanent=true
    command:
      - --provider=keycloak-oidc
      - --cookie-secret=${KEYCLOAK_MASTER_SECRET}
      - --cookie-secure=true
      - --cookie-domain=.${DOMAIN_NAME}
      - --cookie-name=_oauth2_proxy_master
      - --cookie-samesite=lax
      - --provider-display-name="Keycloak OIDC"
      - --oidc-issuer-url=https://auth.${DOMAIN_NAME}/realms/user
      - --upstream=http://radarr:7878
      - --skip-provider-button=true
      - --reverse-proxy=true
      - --pass-basic-auth=false
      - --pass-user-headers=false
      - --set-xauthrequest=false
      - --set-authorization-header=false
      - --set-basic-auth=false
      - --client-id=radarr
      - --client-secret=${KEYCLOAK_RADARR_SECRET}
      - --http-address=0.0.0.0:4180
      - --email-domain=*
      - --session-store-type=redis
      - --redis-connection-url=redis://redis
      - --redirect-url=https://radarr.${DOMAIN_NAME}/oauth2/callback
      - --allowed-role=radarr:client-access
    ports: []
    networks:
      - apps_net
      - apps_protected_net
      - redis
    depends_on:
      - radarr
      - redis
      - keycloak
      - reverse-proxy
    restart: unless-stopped
  tdarr:
    image: docker.io/haveagitgat/tdarr:latest
    labels:
      - traefik.enable=false
    container_name: tdarr
    ports:
      - 8266:8266
    environment:
      - PUID=${USERID}
      - PGID=${GROUPID}
      - TZ=${TZ}
      - UMASK_SET=002
      - serverIP=0.0.0.0
      - serverPort=8266
      - webUIPort=8265
    volumes:
      - ${CONFIGS_BASE_DIR}/tdarr/server:/app/server
      - ${CONFIGS_BASE_DIR}/tdarr/configs:/app/configs
      - ${CONFIGS_BASE_DIR}/tdarr/logs:/app/logs
      - ${MEDIA_BASE_DIR}:/media
      - ${TDARR_TRANSCODE_CACHE}:/temp
    networks:
      - apps_protected_net
    restart: unless-stopped
  tdarr-node:
    image: docker.io/haveagitgat/tdarr_node:latest
    labels:
      - traefik.enable=false
    container_name: tdarr-node
    environment:
      - PUID=${USERID}
      - PGID=${GROUPID}
      - TZ=${TZ}
      - UMASK_SET=002
      - nodeID=MainNode
      - nodeIP=tdarr-node
      - nodePort=8267
      - serverIP=tdarr
      - serverPort=8266
    ports: []
    volumes:
      - ${CONFIGS_BASE_DIR}/tdarr/server:/app/server
      - ${CONFIGS_BASE_DIR}/tdarr/configs:/app/configs
      - ${CONFIGS_BASE_DIR}/tdarr/logs:/app/logs
      - ${MEDIA_BASE_DIR}:/media
      - ${TDARR_TRANSCODE_CACHE}:/temp
    networks:
      - apps_protected_net
    restart: unless-stopped
  tdarr-auth-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    container_name: tdarr-auth-proxy
    labels:
      - traefik.enable=true
      - traefik.docker.network=apps_net
      - traefik.http.services.tdarr_svc.loadbalancer.server.port=4180
      - traefik.http.services.tdarr_svc.loadbalancer.server.scheme=http
      - traefik.http.routers.tdarr.service=tdarr_svc
      - traefik.http.routers.tdarr.rule=Host(`tdarr.${DOMAIN_NAME}`)
      - traefik.http.routers.tdarr.entrypoints=websecure
      - traefik.http.routers.tdarr.tls=true
      - traefik.http.routers.tdarr.tls.certresolver=le
      - traefik.http.routers.tdarr-http.entrypoints=web
      - traefik.http.routers.tdarr-http.rule=Host(`tdarr.${DOMAIN_NAME}`)
      - traefik.http.routers.tdarr-http.middlewares=tdarr-https-redirect
      - traefik.http.middlewares.tdarr-https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.tdarr-https-redirect.redirectscheme.permanent=true
    command:
      - --provider=keycloak-oidc
      - --cookie-secret=${KEYCLOAK_MASTER_SECRET}
      - --cookie-secure=true
      - --cookie-domain=.${DOMAIN_NAME}
      - --cookie-name=_oauth2_proxy_master
      - --cookie-samesite=lax
      - --provider-display-name="Keycloak OIDC"
      - --oidc-issuer-url=https://auth.${DOMAIN_NAME}/realms/user
      - --upstream=http://tdarr:8265
      - --skip-provider-button=true
      - --reverse-proxy=true
      - --pass-basic-auth=false
      - --pass-user-headers=false
      - --set-xauthrequest=false
      - --set-authorization-header=false
      - --set-basic-auth=false
      - --client-id=tdarr
      - --client-secret=${KEYCLOAK_TDARR_SECRET}
      - --http-address=0.0.0.0:4180
      - --email-domain=*
      - --session-store-type=redis
      - --redis-connection-url=redis://redis
      - --redirect-url=https://tdarr.${DOMAIN_NAME}/oauth2/callback
      - --allowed-role=tdarr:client-access
    ports: []
    networks:
      - apps_net
      - apps_protected_net
      - redis
    depends_on:
      - tdarr
      - tdarr-node
      - redis
      - keycloak
      - reverse-proxy
    restart: unless-stopped
  sabnzbd:
    image: ghcr.io/linuxserver/sabnzbd:latest
    labels:
      - traefik.enable=false
    container_name: sabnzbd
    environment:
      - PUID=${USERID}
      - PGID=${GROUPID}
      - TZ=${TZ}
    ports: []
    volumes:
      - ${CONFIGS_BASE_DIR}/sabnzbd:/config
      - ${DOWNLOADS}:/downloads
      - ${INCOMPLETE_DOWNLOADS}:/incomplete-downloads
    networks:
      - apps_protected_net
    restart: unless-stopped
  sabnzbd-auth-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    container_name: sabnzbd-auth-proxy
    labels:
      - traefik.enable=true
      - traefik.docker.network=apps_net
      - traefik.http.services.sabnzbd_svc.loadbalancer.server.port=4180
      - traefik.http.services.sabnzbd_svc.loadbalancer.server.scheme=http
      - traefik.http.routers.sabnzbd.service=sabnzbd_svc
      - traefik.http.routers.sabnzbd.rule=Host(`sab.${DOMAIN_NAME}`)
      - traefik.http.routers.sabnzbd.entrypoints=websecure
      - traefik.http.routers.sabnzbd.tls=true
      - traefik.http.routers.sabnzbd.tls.certresolver=le
      - traefik.http.routers.sabnzbd-http.entrypoints=web
      - traefik.http.routers.sabnzbd-http.rule=Host(`sab.${DOMAIN_NAME}`)
      - traefik.http.routers.sabnzbd-http.middlewares=sabnzbd-https-redirect
      - traefik.http.middlewares.sabnzbd-https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.sabnzbd-https-redirect.redirectscheme.permanent=true
    command:
      - --provider=keycloak-oidc
      - --cookie-secret=${KEYCLOAK_MASTER_SECRET}
      - --cookie-secure=true
      - --cookie-domain=.${DOMAIN_NAME}
      - --cookie-name=_oauth2_proxy_master
      - --cookie-samesite=lax
      - --provider-display-name="Keycloak OIDC"
      - --oidc-issuer-url=https://auth.${DOMAIN_NAME}/realms/user
      - --upstream=http://sabnzbd:8080
      - --skip-provider-button=true
      - --reverse-proxy=true
      - --pass-basic-auth=false
      - --pass-user-headers=false
      - --set-xauthrequest=false
      - --set-authorization-header=false
      - --set-basic-auth=false
      - --client-id=sabnzbd
      - --client-secret=${KEYCLOAK_SABNZBD_SECRET}
      - --http-address=0.0.0.0:4180
      - --email-domain=*
      - --session-store-type=redis
      - --redis-connection-url=redis://redis
      - --redirect-url=https://sab.${DOMAIN_NAME}/oauth2/callback
      - --allowed-role=sabnzbd:client-access
    ports: []
    networks:
      - apps_net
      - apps_protected_net
      - redis
    depends_on:
      - sabnzbd
      - redis
      - keycloak
      - reverse-proxy
    restart: unless-stopped
  plex:
    image: ghcr.io/linuxserver/plex:latest
    container_name: plex
    labels:
      - traefik.enable=true
      - traefik.docker.network=apps_net
      - traefik.http.services.plex_svc.loadbalancer.server.port=32400
      - traefik.http.services.plex_svc.loadbalancer.server.scheme=http
      - traefik.http.routers.plex.service=plex_svc
      - traefik.http.routers.plex.rule=Host(`plex.${DOMAIN_NAME}`)
      - traefik.http.routers.plex.entrypoints=websecure
      - traefik.http.routers.plex.tls=true
      - traefik.http.routers.plex.tls.certresolver=le
      - traefik.http.routers.plex-http.entrypoints=web
      - traefik.http.routers.plex-http.rule=Host(`plex.${DOMAIN_NAME}`)
      - traefik.http.routers.plex-http.middlewares=plex-https-redirect
      - traefik.http.middlewares.plex-https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.plex-https-redirect.redirectscheme.permanent=true
    networks:
      - apps_net
    ports:
      - 32400:32400
      - 1900:1900/udp
      - 3005:3005
      - 5353:5353/udp
      - 8324:8324
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
      - 32469:32469
    environment:
      - PUID=${USERID}
      - PGID=${GROUPID}
      - VERSION=docker
    volumes:
      - ${CONFIGS_BASE_DIR}/plex:/config
      - ${TV_MEDIA_DIR}:/tv
      - ${MOVIE_MEDIA_DIR}:/movies
      - type: tmpfs
        target: /transcode
        tmpfs:
          size: 4294967296  # 1 GiB = 1073741824 bytes
    restart: unless-stopped
  jellyfin:
    image: ghcr.io/linuxserver/jellyfin:latest
    labels:
      - traefik.enable=false
    container_name: jellyfin
    environment:
      - PUID=${USERID}
      - PGID=${GROUPID}
      - TZ=${TZ}
    volumes:
      - ${CONFIGS_BASE_DIR}/jellyfin:/config
      - ${TV_MEDIA_DIR}:/data/tvshows
      - ${MOVIE_MEDIA_DIR}:/data/movies
    networks:
      - apps_protected_net
    restart: unless-stopped
  jellyfin-auth-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    container_name: jellyfin-auth-proxy
    labels:
      - traefik.enable=true
      - traefik.docker.network=apps_net
      - traefik.http.services.jellyfin_svc.loadbalancer.server.port=4180
      - traefik.http.services.jellyfin_svc.loadbalancer.server.scheme=http
      - traefik.http.routers.jellyfin.service=jellyfin_svc
      - traefik.http.routers.jellyfin.rule=Host(`jellyfin.${DOMAIN_NAME}`)
      - traefik.http.routers.jellyfin.entrypoints=websecure
      - traefik.http.routers.jellyfin.tls=true
      - traefik.http.routers.jellyfin.tls.certresolver=le
      - traefik.http.routers.jellyfin-http.entrypoints=web
      - traefik.http.routers.jellyfin-http.rule=Host(`jellyfin.${DOMAIN_NAME}`)
      - traefik.http.routers.jellyfin-http.middlewares=jellyfin-https-redirect
      - traefik.http.middlewares.jellyfin-https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.jellyfin-https-redirect.redirectscheme.permanent=true
    command:
      - --provider=keycloak-oidc
      - --cookie-secret=${KEYCLOAK_USER_SECRET}
      - --cookie-secure=true
      - --cookie-domain=.${DOMAIN_NAME}
      - --cookie-name=_oauth2_proxy_user
      - --cookie-samesite=lax
      - --provider-display-name="Keycloak OIDC"
      - --oidc-issuer-url=https://auth.${DOMAIN_NAME}/realms/user
      - --upstream=http://jellyfin:8096
      - --skip-provider-button=true
      - --reverse-proxy=true
      - --pass-basic-auth=false
      - --pass-user-headers=false
      - --set-xauthrequest=false
      - --set-authorization-header=false
      - --set-basic-auth=false
      - --client-id=jellyfin
      - --client-secret=${KEYCLOAK_JELLYFIN_SECRET}
      - --http-address=0.0.0.0:4180
      - --email-domain=*
      - --session-store-type=redis
      - --redis-connection-url=redis://redis
      - --redirect-url=https://jellyfin.${DOMAIN_NAME}/oauth2/callback
      - --allowed-role=jellyfin:client-access
    ports: []
    networks:
      - apps_net
      - apps_protected_net
      - redis
    depends_on:
      - jellyfin
      - redis
      - keycloak
      - reverse-proxy
    restart: unless-stopped
  code-server:
    image: ghcr.io/linuxserver/code-server:latest
    labels:
      - traefik.enable=false
    container_name: code-server
    environment:
      - PUID=${USERID}
      - PGID=${GROUPID}
      - TZ=${TZ}
    ports: []
    volumes:
      - ${CONFIGS_BASE_DIR}/code-server:/config
      - /data:/data
    networks:
      - apps_protected_net
    restart: unless-stopped
  code-server-auth-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    container_name: code-server-auth-proxy
    labels:
      - traefik.enable=true
      - traefik.docker.network=apps_net
      - traefik.http.services.code-server_svc.loadbalancer.server.port=4180
      - traefik.http.services.code-server_svc.loadbalancer.server.scheme=http
      - traefik.http.routers.code-server.service=code-server_svc
      - traefik.http.routers.code-server.rule=Host(`code-server.${DOMAIN_NAME}`)
      - traefik.http.routers.code-server.entrypoints=websecure
      - traefik.http.routers.code-server.tls=true
      - traefik.http.routers.code-server.tls.certresolver=le
      - traefik.http.routers.code-server-http.entrypoints=web
      - traefik.http.routers.code-server-http.rule=Host(`code-server.${DOMAIN_NAME}`)
      - traefik.http.routers.code-server-http.middlewares=code-server-https-redirect
      - traefik.http.middlewares.code-server-https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.code-server-https-redirect.redirectscheme.permanent=true
    command:
      - --provider=keycloak-oidc
      - --cookie-secret=${KEYCLOAK_MASTER_SECRET}
      - --cookie-secure=true
      - --cookie-domain=.${DOMAIN_NAME}
      - --cookie-name=_oauth2_proxy_master
      - --cookie-samesite=lax
      - --provider-display-name="Keycloak OIDC"
      - --oidc-issuer-url=https://auth.${DOMAIN_NAME}/realms/user
      - --upstream=http://code-server:8443
      - --skip-provider-button=true
      - --reverse-proxy=true
      - --pass-basic-auth=false
      - --pass-user-headers=false
      - --set-xauthrequest=false
      - --set-authorization-header=false
      - --set-basic-auth=false
      - --client-id=code-server
      - --client-secret=${KEYCLOAK_CODE_SERVER_SECRET}
      - --http-address=0.0.0.0:4180
      - --email-domain=*
      - --session-store-type=redis
      - --redis-connection-url=redis://redis
      - --redirect-url=https://code-server.${DOMAIN_NAME}/oauth2/callback
      - --allowed-role=code-server:client-access
    ports: []
    networks:
      - apps_net
      - apps_protected_net
      - redis
    depends_on:
      - code-server
      - redis
      - keycloak
      - reverse-proxy
    restart: unless-stopped
  overseerr:
    image: docker.io/sctx/overseerr:latest
    user: ${USERID}:${GROUPID}
    container_name: overseerr
    labels:
      - traefik.enable=false
    environment:
      - LOG_LEVEL=info
      - TZ=${TZ}
    ports: []
    networks:
      - apps_protected_net
    volumes:
      - ${CONFIGS_BASE_DIR}/overseerr:/app/config
    restart: unless-stopped
  overseerr-auth-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    container_name: overseerr-auth-proxy
    labels:
      - traefik.enable=true
      - traefik.docker.network=apps_net
      - traefik.http.services.overseerr_svc.loadbalancer.server.port=4180
      - traefik.http.services.overseerr_svc.loadbalancer.server.scheme=http
      - traefik.http.routers.overseerr.service=overseerr_svc
      - traefik.http.routers.overseerr.rule=Host(`overseerr.${DOMAIN_NAME}`)
      - traefik.http.routers.overseerr.entrypoints=websecure
      - traefik.http.routers.overseerr.tls=true
      - traefik.http.routers.overseerr.tls.certresolver=le
      - traefik.http.routers.overseerr-http.entrypoints=web
      - traefik.http.routers.overseerr-http.rule=Host(`overseerr.${DOMAIN_NAME}`)
      - traefik.http.routers.overseerr-http.middlewares=overseerr-https-redirect
      - traefik.http.middlewares.overseerr-https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.overseerr-https-redirect.redirectscheme.permanent=true
    command:
      - --provider=keycloak-oidc
      - --cookie-secret=${KEYCLOAK_USER_SECRET}
      - --cookie-secure=true
      - --cookie-domain=.${DOMAIN_NAME}
      - --cookie-name=_oauth2_proxy_user
      - --cookie-samesite=lax
      - --provider-display-name="Keycloak OIDC"
      - --oidc-issuer-url=https://auth.${DOMAIN_NAME}/realms/user
      - --upstream=http://overseerr:5055
      - --skip-provider-button=true
      - --reverse-proxy=true
      - --pass-basic-auth=false
      - --pass-user-headers=false
      - --set-xauthrequest=false
      - --set-authorization-header=false
      - --set-basic-auth=false
      - --client-id=overseerr
      - --client-secret=${KEYCLOAK_OVERSEERR_SECRET}
      - --http-address=0.0.0.0:4180
      - --email-domain=*
      - --session-store-type=redis
      - --redis-connection-url=redis://redis
      - --redirect-url=https://overseerr.${DOMAIN_NAME}/oauth2/callback
      - --allowed-role=overseerr:client-access
    ports: []
    networks:
      - apps_net
      - apps_protected_net
      - redis
    depends_on:
      - overseerr
      - redis
      - keycloak
      - reverse-proxy
    restart: unless-stopped
  duplicati:
    image: ghcr.io/linuxserver/duplicati:latest
    container_name: duplicati
    labels:
      - traefik.enable=false
    environment:
      - PUID=0
      - PGID=0
      - TZ=${TZ}
    ports: []
    volumes:
      - ${CONFIGS_BASE_DIR}/duplicati:/config
      - ${BACKUPS_DIR}:/backups
      - ${CONFIGS_BASE_DIR}:/source
    networks:
      - apps_protected_net
    restart: unless-stopped
  duplicati-auth-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    container_name: duplicati-auth-proxy
    labels:
      - traefik.enable=true
      - traefik.docker.network=apps_net
      - traefik.http.services.duplicati_svc.loadbalancer.server.port=4180
      - traefik.http.services.duplicati_svc.loadbalancer.server.scheme=http
      - traefik.http.routers.duplicati.service=duplicati_svc
      - traefik.http.routers.duplicati.rule=Host(`backups.${DOMAIN_NAME}`)
      - traefik.http.routers.duplicati.entrypoints=websecure
      - traefik.http.routers.duplicati.tls=true
      - traefik.http.routers.duplicati.tls.certresolver=le
      - traefik.http.routers.duplicati-http.entrypoints=web
      - traefik.http.routers.duplicati-http.rule=Host(`backups.${DOMAIN_NAME}`)
      - traefik.http.routers.duplicati-http.middlewares=duplicati-https-redirect
      - traefik.http.middlewares.duplicati-https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.duplicati-https-redirect.redirectscheme.permanent=true
    command:
      - --provider=keycloak-oidc
      - --cookie-secret=${KEYCLOAK_USER_SECRET}
      - --cookie-secure=true
      - --cookie-domain=.${DOMAIN_NAME}
      - --cookie-name=_oauth2_proxy_user
      - --cookie-samesite=lax
      - --provider-display-name="Keycloak OIDC"
      - --oidc-issuer-url=https://auth.${DOMAIN_NAME}/realms/user
      - --upstream=http://duplicati:8200
      - --skip-provider-button=true
      - --reverse-proxy=true
      - --pass-basic-auth=false
      - --pass-user-headers=false
      - --set-xauthrequest=false
      - --set-authorization-header=false
      - --set-basic-auth=false
      - --client-id=duplicati
      - --client-secret=${KEYCLOAK_DUPLICATI_SECRET}
      - --http-address=0.0.0.0:4180
      - --email-domain=*
      - --session-store-type=redis
      - --redis-connection-url=redis://redis
      - --redirect-url=https://backups.${DOMAIN_NAME}/oauth2/callback
      - --allowed-role=duplicati:client-access
    ports: []
    networks:
      - apps_net
      - apps_protected_net
      - redis
    depends_on:
      - duplicati
      - redis
      - keycloak
      - reverse-proxy
    restart: unless-stopped
  netdata:
    image: docker.io/netdata/netdata:stable
    container_name: netdata
    labels:
      - traefik.enable=false
    cap_add:
      - SYS_PTRACE
    volumes:
      - netdataconfig:/etc/netdata
      - netdatalib:/var/lib/netdata
      - netdatacache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DOCKER_USR=root
    ports:
      - 19999:19999
    security_opt:
      - apparmor:unconfined
    networks:
      - apps_protected_net
    restart: unless-stopped
  netdata-auth-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    container_name: netdata-auth-proxy
    labels:
      - traefik.enable=true
      - traefik.docker.network=apps_net
      - traefik.http.services.netdata_svc.loadbalancer.server.port=4180
      - traefik.http.services.netdata_svc.loadbalancer.server.scheme=http
      - traefik.http.routers.netdata.service=netdata_svc
      - traefik.http.routers.netdata.rule=Host(`netdata.${DOMAIN_NAME}`)
      - traefik.http.routers.netdata.entrypoints=websecure
      - traefik.http.routers.netdata.tls=true
      - traefik.http.routers.netdata.tls.certresolver=le
      - traefik.http.routers.netdata-http.entrypoints=web
      - traefik.http.routers.netdata-http.rule=Host(`netdata.${DOMAIN_NAME}`)
      - traefik.http.routers.netdata-http.middlewares=netdata-https-redirect
      - traefik.http.middlewares.netdata-https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.netdata-https-redirect.redirectscheme.permanent=true
    command:
      - --provider=keycloak-oidc
      - --cookie-secret=${KEYCLOAK_USER_SECRET}
      - --cookie-secure=true
      - --cookie-domain=.${DOMAIN_NAME}
      - --cookie-name=_oauth2_proxy_user
      - --cookie-samesite=lax
      - --provider-display-name="Keycloak OIDC"
      - --oidc-issuer-url=https://auth.${DOMAIN_NAME}/realms/user
      - --upstream=http://netdata:19999
      - --skip-provider-button=true
      - --reverse-proxy=true
      - --pass-basic-auth=false
      - --pass-user-headers=false
      - --set-xauthrequest=false
      - --set-authorization-header=false
      - --set-basic-auth=false
      - --client-id=netdata
      - --client-secret=${KEYCLOAK_NETDATA_SECRET}
      - --http-address=0.0.0.0:4180
      - --email-domain=*
      - --session-store-type=redis
      - --redis-connection-url=redis://redis
      - --redirect-url=https://netdata.${DOMAIN_NAME}/oauth2/callback
      - --allowed-role=netdata:client-access
    ports: []
    networks:
      - apps_net
      - apps_protected_net
      - redis
    depends_on:
      - netdata
      - redis
      - keycloak
      - reverse-proxy
    restart: unless-stopped
  postgres-keycloak:
    image: docker.io/library/postgres:14
    user: ${USERID}:${GROUPID}
    labels:
      - traefik.enable=false
    container_name: postgres-keycloak
    volumes:
      - ${CONFIGS_BASE_DIR}/postgres:/var/lib/postgresql/data
      - ${BACKUPS_DIR}:/backups
    ports: []
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: ${POSTGRES_KEYCLOAK_ADMIN_PASSWORD}
    networks:
      - keycloak_db
    restart: unless-stopped
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    labels:
      - traefik.enable=true
      - traefik.docker.network=apps_net
      - traefik.http.services.keycloak_svc.loadbalancer.server.port=8080
      - traefik.http.services.keycloak_svc.loadbalancer.server.scheme=http
      - traefik.http.routers.keycloak.service=keycloak_svc
      - traefik.http.routers.keycloak.rule=Host(`auth.${DOMAIN_NAME}`)
      - traefik.http.routers.keycloak.entrypoints=websecure
      - traefik.http.routers.keycloak.tls=true
      - traefik.http.routers.keycloak.tls.certresolver=le
      - traefik.http.routers.keycloak-http.entrypoints=web
      - traefik.http.routers.keycloak-http.rule=Host(`auth.${DOMAIN_NAME}`)
      - traefik.http.routers.keycloak-http.service=keycloak_svc
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB_PASSWORD: ${POSTGRES_KEYCLOAK_ADMIN_PASSWORD}
    command:
      - start
      - --auto-build
      - --db-schema=public
      - --db-url-database=keycloak
      - --db-url-host=postgres-keycloak
      - --db-username=keycloak
      - --db=postgres
      - --http-enabled=true
      - --hostname=auth.${DOMAIN_NAME}
      - --proxy=edge
    ports: []
    networks:
      - apps_net
      - keycloak_db
    depends_on:
      - postgres-keycloak
      - reverse-proxy
    restart: unless-stopped
  ddclient:
    image: ghcr.io/linuxserver/ddclient:latest
    labels:
      - traefik.enable=false
    container_name: ddclient
    environment:
      - PUID=${USERID}
      - PGID=${GROUPID}
      - TZ=${TZ}
    ports: []
    volumes:
      - ${DDCLIENT_CONF_DIR}:/config
    networks:
      - apps_net
    restart: unless-stopped
  redis:
    image: docker.io/bitnami/redis:latest
    container_name: redis
    labels:
      - traefik.enable=false
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - redis:/bitnami/redis/data:rw
    ports: []
    networks:
      - redis
    restart: unless-stopped
  wireguard:
    image: ghcr.io/linuxserver/wireguard:latest
    container_name: wireguard
    labels:
      - traefik.enable=false
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=${USERID}
      - PGID=${GROUPID}
      - TZ=${TZ}
      - SERVERURL=${DOMAIN_NAME}
      - SERVERPORT=51820
      - PEERS=10
      - PEERDNS=auto
      - INTERNAL_SUBNET=${WIREGUARD_INTERNAL_SUBNET}
      - ALLOWEDIPS=0.0.0.0/0
    volumes:
      - ${CONFIGS_BASE_DIR}/wireguard:/config
      - /lib/modules:/lib/modules
    ports:
      - 51820:51820/udp
    networks:
      - apps_net
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped
  reverse-proxy:
    image: docker.io/library/traefik:v2.6
    user: ${USERID}:${DOCKER_GID}
    container_name: reverse-proxy
    command: >
      --api.insecure=true
      --api.debug=false
      --api.dashboard=true
      --log=true
      --log.level=INFO
      --providers.docker
      --providers.docker.network=apps_net
      --entryPoints.web.address=:80
      --entryPoints.websecure.address=:443
      --certificatesresolvers.le.acme.httpchallenge=true
      --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
      --certificatesresolvers.le.acme.email=${EMAIL}
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    networks:
      - apps_net
    volumes:
      - ${CONFIGS_BASE_DIR}/letsencrypt/acme.json:/acme.json
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
